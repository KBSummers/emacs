// program frequency synthesizer (PCI Express and USB only)
//
// SyncLink devices have a fixed 14.7456MHz base clock.
// The serial controller generates clocks by dividing the base clock
// by a 16-bit integer. Generating a clock that is not a divisor of
// the fixed base clock requires the frequency synthesizer.
//
// The frequency synthesizer is an IDT ICS307-3. Serial controller
// GPIO signals drive the synthesizer SPI interface for programming
// a 132 bit word calculated by the IDT Versaclock 2 software.
//
// Contact Microgate for help creating new entries not in the tables below.
// Maximum base clock is 82MHz for USB and 64MHz for PCI.

#include <stdio.h>
#include <unistd.h>
#include <sys/ioctl.h>
#include <errno.h>
#include <string.h>
#include <fcntl.h>
#include <asm/ioctl.h>
#include <linux/types.h>

#include "synclink.h"

struct table_entry {
	unsigned int freq;    /* frequency */
	unsigned int data[5]; /* programming data */
};

// PCI
// ICS307-3:
// - reference clock = 14.7456MHz oscillator
// - VDD = 3.3V
// - CLK1 (pin 8) outputs clock
struct table_entry pci_table[] =
{
	{ 1228800, {0x1800155E, 0x29A00000, 0x00000000, 0x0000DFFF, 0x60000000}},
	{12288000, {0x29BFDC00, 0x61200000, 0x00000000, 0x0000A5FF, 0xA0000000}},
	{14745600, {0x38003C05, 0x24200000, 0x00000000, 0x000057FF, 0xA0000000}},
	{16000000, {0x280CFC02, 0x64A00000, 0x00000000, 0x000307FD, 0x20000000}},
	{16384000, {0x08001402, 0xA1200000, 0x00000000, 0x0000A5FF, 0xA0000000}},
	{20000000, {0x00001403, 0xE0C00000, 0x00000000, 0x00045E02, 0xF0000000}},
	{24000000, {0x00001405, 0x61400000, 0x00000000, 0x0004D204, 0x30000000}},
	{28219200, {0x00001405, 0xA1400000, 0x00000000, 0x0003C1FC, 0x20000000}},
	{30000000, {0x20267C05, 0x64C00000, 0x00000000, 0x00050603, 0x30000000}},
	{32000000, {0x21BFDC00, 0x5A400000, 0x00000000, 0x0004D206, 0x30000000}},
	{45056000, {0x08001406, 0xE0200000, 0x00000000, 0x000217FE, 0x20000000}},
	{64000000, {0x21BFDC00, 0x12000000, 0x00000000, 0x000F5E14, 0xF0000000}},
	{0, {0, 0, 0, 0, 0}} /* final entry must have zero freq */
};

// USB
// ICS307-3:
// - reference clock = 14.7456MHz xtal
// - VDD = 3.3V
// - CLK3 (pin 14) fsynth
// - CLK1 (pin 8)  base clock
//
// Note: CLK1 and CLK3 outputs must always be driven to prevent floating
// clock inputs to the FPGA. When calculating programming word with Versaclock,
// select same output on CLK1 and CLK3 or select CLK1 as multiple of CLK3.
struct table_entry usb_table[] =
{
	{ 1228800, {0x296C1402, 0x25200000, 0x00000000, 0x00009FFF, 0xA0000000}},
	{12288000, {0x28401400, 0xE5200000, 0x00000000, 0x00009BFF, 0xA0000000}},
	{14745600, {0x28481401, 0xE5200000, 0x00000000, 0x0000A5FF, 0xA0000000}},
	{16000000, {0x284C1402, 0x64A00000, 0x00000000, 0x000307FD, 0x20000000}},
	{16384000, {0x28501402, 0xE4A00000, 0x00000000, 0x0001F9FE, 0x20000000}},
	{20000000, {0x205C1404, 0x65400000, 0x00000000, 0x00068205, 0xF0000000}},
	{24000000, {0x20641405, 0x65400000, 0x00000000, 0x0004D204, 0x30000000}},
	{28219200, {0x20641405, 0x64C00000, 0x00000000, 0x0004F603, 0x70000000}},
	{30000000, {0x20641405, 0x64C00000, 0x00000000, 0x00050603, 0x30000000}},
	{32000000, {0x206C1406, 0x65400000, 0x00000000, 0x00049E03, 0xF0000000}},
	{45056000, {0x28701406, 0xE4200000, 0x00000000, 0x000217FE, 0x20000000}},
	{64000000, {0x20781400, 0x4D400000, 0x00000000, 0x00049E03, 0xF0000000}},
	{0, {0, 0, 0, 0, 0}} /* final entry must have zero freq */
};

void set_gpio(int fd, int bit, int val)
{
	struct gpio_desc gpio = {val << bit, 1 << bit, 0, 0};
	ioctl(fd, MGSL_IOCSGPIO, &gpio);
}

// return 0 on success or error code
int set_fsynth_rate(int fd, unsigned int freq)
{
	int i;
	unsigned int dword_val = 0;
	MGSL_PARAMS params;
	struct gpio_desc gpio = {0, 0, 0, 0xffffffff};
	unsigned int usb_mask = (0xf << 20); // expected USB outputs
	int mux = 15; // PCI mux bit
	int clk = 14; // PCI clk bit
	int sel = 13; // PCI sel bit
	int dat = 12; // PCI dat bit
	struct table_entry *table = pci_table;
	struct table_entry *entry;
	unsigned int *data = NULL;

	// check GPIO directions against expected USB outputs
	if (!ioctl(fd, MGSL_IOCGGPIO, &gpio) &&
		((gpio.dir & usb_mask) == usb_mask)) {
		mux = 23;
		clk = 22;
		sel = 21;
		dat = 20;
		table = usb_table;
	}

	// search for frequency in table
	for (entry = table ; entry->freq ; entry++) {
		if (entry->freq == freq) {
			data = entry->data;
			break;
		}
	}
	if (!data) {
		return -1;
	}

	set_gpio(fd, clk, 0);
	for (i = 0 ; i < 132 ; i++) {
		if (!(i % 32))
			dword_val = data[i/32];
		set_gpio(fd, dat, (dword_val & (1 << 31)) ? 1 : 0);
		set_gpio(fd, clk, 1); // pulse clk to load bit
		set_gpio(fd, clk, 0);
		dword_val <<= 1;
	}
	set_gpio(fd, sel, 1); // pulse sel to accept data
	set_gpio(fd, sel, 0);
	set_gpio(fd, mux, 1); // switch base clock to fsynth

	// Tell serial device the new base clock frequency.
	// Repeat for all ports on same card (common base clock).
	params.mode = MGSL_MODE_BASE_CLOCK;
	params.clock_speed = freq;
	ioctl(fd, MGSL_IOCSPARAMS, &params);

	return 0;
}

int main(int argc, char* argv[])
{
	int fd;
	unsigned int freq = 20000000;

	if (argc < 2) {
		printf("No device name specified.\n");
		return -1;
	}
	printf("set fsynth rate for %s to %d\n", argv[1], freq);

	if ((fd = open(argv[1], O_RDWR | O_NONBLOCK, 0)) < 0) {
		printf("open error=%d %s\n", errno, strerror(errno));
		return fd;
	}

	if (set_fsynth_rate(fd, freq)) {
		printf("%d not found in table.\n", freq);
		return -1;
	}

	close(fd);
	return 0;
}