from anytree import NodeMixin, RenderTree, AnyNode
from anytree.exporter import JsonExporter
import sys


def export_json(root_node, filename, indent_level=2, sort=True):
    exporter = JsonExporter(indent=indent_level, sort_keys=sort)
    f = open(filename, "w")
    f.write(exporter.export(root_node))
class node(NodeMixin):
        def __init__(self, name, parent=None, children=None):
            self.name = name
            if children:
                self.children = children
            if parent:
                self.parent = parent
class use_case:
    root = AnyNode(node('kyle'))
    t = AnyNode(node('tim'))
    j = AnyNode(node('jesse', parent=t))
    t.parent = root
    def _init(self):
        pass
    def prints(self):
        for pre, _, node in RenderTree(self.root):
            treestr = u"%s%s" % (pre, node.name)
            print(treestr.ljust(8))
x = use_case()
export_json(x.root, "out.json")
def x():
    x = node('x')
    print(x)
x()
#main(k)
#print(k.children[1].name)


def query_yes_no(question, default="yes"):
    """Ask a yes/no question via raw_input() and return their answer.

    "question" is a string that is presented to the user.
    "default" is the presumed answer if the user just hits <Enter>.
        It must be "yes" (the default), "no" or None (meaning
        an answer is required of the user).

    The "answer" return value is one of "yes" or "no".
    """
    valid = {"yes":"yes",   "y":"yes",  "ye":"yes",
             "no":"no",     "n":"no"}
    if default == None:
        prompt = " [y/n] "
    elif default == "yes":
        prompt = " [Y/n] "
    elif default == "no":
        prompt = " [y/N] "
    else:
        raise ValueError("invalid default answer: '%s'" % default)

    while 1:
        sys.stdout.write(question + prompt)
        choice = input().lower()
        if default is not None and choice == '':
            return default
        elif choice in valid.keys():
            return valid[choice]
        else:
            sys.stdout.write("Please respond with 'yes' or 'no' "\
                             "(or 'y' or 'n').\n")
query_yes_no("quesiton????")
